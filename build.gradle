plugins {
    id "us.kirchmeier.capsule" version "0.9.0"
}

apply plugin: 'jacoco'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'codenarc'
apply plugin: 'maven'

group 'org.transmartproject'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url 'https://repo.thehyve.nl/content/groups/public/' }
}

compileGroovy {
    options.incremental = true
}

dependencies {
    final SPRING_VERSION = '4.0.5.RELEASE'
    final BATCH_VERSION = '3.0.1.RELEASE'
    final LOGBACK_VERSION = '1.0.13'
    final SLF4J_VERSION = '1.7.5'
    final GUAVA_VERSION = '18.0'
    final JUNIT_VERSION = '4.11'
    final GMOCK_VERSION = '0.8.3'
    final POSTGRESQL_VERSION = '9.3-1102-jdbc41'
    final ORACLE_VERSION = '11.2.0.3.0'
    final H2_VERSION = '1.4.185'

    compile 'org.codehaus.groovy:groovy-all:2.3.6'

    compile group: 'org.springframework.batch', name: 'spring-batch-core', version: BATCH_VERSION

    compile group: 'org.springframework', name: 'spring-context', version: SPRING_VERSION
    compile group: 'org.springframework', name: 'spring-tx', version: SPRING_VERSION
    compile group: 'org.springframework', name: 'spring-jdbc', version: SPRING_VERSION
//  compile group: 'org.springframework', name: 'spring-orm', version: SPRING_VERSION
//  compile group: 'org.springframework', name: 'spring-oxm', version: SPRING_VERSION

    compile group: 'com.jolbox', name: 'bonecp-spring', version: '0.8.0.RELEASE'
    compile group: 'com.google.guava', name: 'guava', version: GUAVA_VERSION
    compile group: 'commons-cli', name: 'commons-cli', version: '1.2'

    compile group: 'ch.qos.logback', name: 'logback-classic', version: LOGBACK_VERSION
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: SLF4J_VERSION

    runtime group: 'org.postgresql', name: 'postgresql', version: POSTGRESQL_VERSION
    runtime group: 'com.oracle',     name: 'ojdbc6',     version: ORACLE_VERSION

    testCompile group: 'org.springframework.batch', name: 'spring-batch-test', version: BATCH_VERSION
    testCompile group: 'org.springframework', name: 'spring-test', version: SPRING_VERSION
    testCompile group: 'junit', name: 'junit', version: JUNIT_VERSION
    testCompile group: 'org.gmock', name: 'gmock', version: GMOCK_VERSION
    testCompile group: 'uk.co.modular-it', name: 'hamcrest-date', version: '0.9.5'

    testCompile group: 'com.h2database', name: 'h2', version: H2_VERSION
}

def mainClass = 'org.transmartproject.batch.startup.RunJob'

run {
    mainClassName = mainClass

    if (project.hasProperty('args')) {
        def collectedArgs = []
        def matcher = project.args =~ '''(?x)
        (?:
            ([^'"]\\S*) | #unquoted parameter
            (?:'([^']*)')  |
            (?:"([^"]*)")
        )
        (?:\\s+|$)'''
        while (matcher.find()) {
            collectedArgs << matcher.group(1) ?: matcher.group(2) ?: matcher.group(3)
        }

        args collectedArgs
    }
}

task capsule(type: ThinCapsule) {
    description = 'Creates the capsule jar.'
    group = 'build'
    applicationClass mainClass
    reallyExecutable { trampoline() }

    capsuleManifest {
        extractCapsule = false
        repositories = ['central', 'https://repo.thehyve.nl/content/groups/public/']
    }
}

sourceSets {
    functionalTest {
        java.srcDir 'src/test-func/java'
        groovy.srcDir 'src/test-func/groovy'
        resources.srcDir 'src/test-func/resources'
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += sourceSets.test.compileClasspath
    }
}

task functionalTestPrepare(type: JavaExec) {
    description = 'Prepares the database for functional testing.'
    group = 'verification'
    main = 'org.springframework.batch.core.launch.support.CommandLineJobRunner'
    args 'org.transmartproject.batch.preparation.TestDatabasePrepareConfiguration',
            'testDatabasePrepareJob'
    classpath += sourceSets.test.runtimeClasspath
    classpath += sourceSets.functionalTest.runtimeClasspath
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    systemProperties = ['user.timezone': 'GMT']
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath += sourceSets.test.runtimeClasspath
    classpath += sourceSets.functionalTest.runtimeClasspath
    useJUnit()
    outputs.upToDateWhen { false }

    reports {
        html.destination = file("$reports.html.destination/functional")
        junitXml.destination = file("$reports.junitXml.destination/functional")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

def getPomConfiguration() {
    return {
        name 'transmart-batch'
        packaging 'jar'
        description 'tranSMART pipeline alternative to Kettle + stored procedures, using Spring Batch.'
        inceptionYear '2014'
        url 'https://github.com/thehyve/transmart-batch'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
    }
}

codenarc {
    configFile = new File("${project.projectDir.absolutePath}/gradle/codenarc/ruleset.groovy")

    reportFormat = 'html'
}


jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        //html.destination "${buildDir}/jacocoHtml"
    }
}

task setupSchema(type: JavaExec) {
    description = 'Creates the ts_batch schema.'
    main = 'org.transmartproject.batch.db.BatchSchemaPopulator'
    classpath = sourceSets.main.runtimeClasspath
}

configurations.archives.artifacts.clear() //remove jar
artifacts {
    archives capsule
}

uploadArchives {
    repositories {
        mavenDeployer {
            def credentials = [
                // put these in ~/.gradle/gradle.properties
                userName: project.ext.properties['mavenTheHyveUser'] ?: '',
                password: project.ext.properties['mavenTheHyvePassword'] ?: '',
            ]

            repository url: 'https://repo.thehyve.nl/content/repositories/releases/',
                authentication: credentials
            snapshotRepository url: 'https://repo.thehyve.nl/content/repositories/snapshots/',
                authentication: credentials

            pom.project pomConfiguration
        }
    }
}
